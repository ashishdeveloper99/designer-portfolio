"use strict";

var HTTP_METHODS = require('./helpers/http_methods');

var _require = require('./helpers/request_handler'),
    requestHandler = _require.requestHandler;

var _require2 = require('./helpers/constants'),
    URI = _require2.URI;

var mainMethods = {
  authenticate: function authenticate(params) {
    var endpoint = "".concat(URI, "/authenticate");
    return requestHandler(HTTP_METHODS.POST, endpoint, params);
  },
  getUser: function getUser() {
    var endpoint = "".concat(URI, "/user");
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  getProjects: function getProjects() {
    var endpoint = "".concat(URI, "/projects");
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  addProject: function addProject(params) {
    var endpoint = "".concat(URI, "/projects");
    return requestHandler(HTTP_METHODS.POST, endpoint, params);
  },
  getProject: function getProject(params) {
    var endpoint = "".concat(URI, "/projects/").concat(params.id);
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  editProject: function editProject(params) {
    var endpoint = "".concat(URI, "/projects/").concat(params.id);
    delete params.id;
    return requestHandler(HTTP_METHODS.PATCH, endpoint, params);
  },
  deleteProject: function deleteProject(params) {
    var endpoint = "".concat(URI, "/projects/").concat(params.id);
    return requestHandler(HTTP_METHODS.DELETE, endpoint, params);
  },
  getBuckets: function getBuckets() {
    var endpoint = "".concat(URI, "/buckets");
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  getBucket: function getBucket(params) {
    var endpoint = "".concat(URI, "/buckets/").concat(params.slug);
    return requestHandler(HTTP_METHODS.GET, endpoint);
  },
  addBucket: function addBucket(params) {
    var endpoint = "".concat(URI, "/buckets");
    return requestHandler(HTTP_METHODS.POST, endpoint, params);
  },
  editBucket: function editBucket(params) {
    var endpoint = "".concat(URI, "/buckets/").concat(params.slug);
    delete params.slug;
    return requestHandler(HTTP_METHODS.PATCH, endpoint, params);
  },
  deleteBucket: function deleteBucket(params) {
    var endpoint = "".concat(URI, "/buckets/").concat(params.slug);
    return requestHandler(HTTP_METHODS.DELETE, endpoint, params);
  }
};
module.exports = mainMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIVFRQX01FVEhPRFMiLCJyZXF1aXJlIiwicmVxdWVzdEhhbmRsZXIiLCJVUkkiLCJtYWluTWV0aG9kcyIsImF1dGhlbnRpY2F0ZSIsInBhcmFtcyIsImVuZHBvaW50IiwiUE9TVCIsImdldFVzZXIiLCJHRVQiLCJnZXRQcm9qZWN0cyIsImFkZFByb2plY3QiLCJnZXRQcm9qZWN0IiwiaWQiLCJlZGl0UHJvamVjdCIsIlBBVENIIiwiZGVsZXRlUHJvamVjdCIsIkRFTEVURSIsImdldEJ1Y2tldHMiLCJnZXRCdWNrZXQiLCJzbHVnIiwiYWRkQnVja2V0IiwiZWRpdEJ1Y2tldCIsImRlbGV0ZUJ1Y2tldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIVFRQX01FVEhPRFMgPSByZXF1aXJlKCcuL2hlbHBlcnMvaHR0cF9tZXRob2RzJylcbmNvbnN0IHsgcmVxdWVzdEhhbmRsZXIgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9yZXF1ZXN0X2hhbmRsZXInKVxuY29uc3QgeyBVUkkgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9jb25zdGFudHMnKVxuXG5jb25zdCBtYWluTWV0aG9kcyA9IHtcbiAgYXV0aGVudGljYXRlOiAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L2F1dGhlbnRpY2F0ZWBcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBPU1QsIGVuZHBvaW50LCBwYXJhbXMpXG4gIH0sXG4gIGdldFVzZXI6ICgpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vdXNlcmBcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLkdFVCwgZW5kcG9pbnQpXG4gIH0sXG4gIGdldFByb2plY3RzOiAoKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L3Byb2plY3RzYFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuR0VULCBlbmRwb2ludClcbiAgfSxcbiAgYWRkUHJvamVjdDogKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7VVJJfS9wcm9qZWN0c2BcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBPU1QsIGVuZHBvaW50LCBwYXJhbXMpXG4gIH0sXG4gIGdldFByb2plY3Q6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vcHJvamVjdHMvJHtwYXJhbXMuaWR9YFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuR0VULCBlbmRwb2ludClcbiAgfSxcbiAgZWRpdFByb2plY3Q6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vcHJvamVjdHMvJHtwYXJhbXMuaWR9YFxuICAgIGRlbGV0ZSBwYXJhbXMuaWRcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBBVENILCBlbmRwb2ludCwgcGFyYW1zKVxuICB9LFxuICBkZWxldGVQcm9qZWN0OiAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L3Byb2plY3RzLyR7cGFyYW1zLmlkfWBcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLkRFTEVURSwgZW5kcG9pbnQsIHBhcmFtcylcbiAgfSxcbiAgZ2V0QnVja2V0czogKCkgPT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7VVJJfS9idWNrZXRzYFxuICAgIHJldHVybiByZXF1ZXN0SGFuZGxlcihIVFRQX01FVEhPRFMuR0VULCBlbmRwb2ludClcbiAgfSxcbiAgZ2V0QnVja2V0OiAocGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBgJHtVUkl9L2J1Y2tldHMvJHtwYXJhbXMuc2x1Z31gXG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyKEhUVFBfTUVUSE9EUy5HRVQsIGVuZHBvaW50KVxuICB9LFxuICBhZGRCdWNrZXQ6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0c2BcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBPU1QsIGVuZHBvaW50LCBwYXJhbXMpXG4gIH0sXG4gIGVkaXRCdWNrZXQ6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke3BhcmFtcy5zbHVnfWBcbiAgICBkZWxldGUgcGFyYW1zLnNsdWdcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLlBBVENILCBlbmRwb2ludCwgcGFyYW1zKVxuICB9LFxuICBkZWxldGVCdWNrZXQ6IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAke1VSSX0vYnVja2V0cy8ke3BhcmFtcy5zbHVnfWBcbiAgICByZXR1cm4gcmVxdWVzdEhhbmRsZXIoSFRUUF9NRVRIT0RTLkRFTEVURSwgZW5kcG9pbnQsIHBhcmFtcylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1haW5NZXRob2RzXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsd0JBQUQsQ0FBNUI7O0FBQ0EsZUFBMkJBLE9BQU8sQ0FBQywyQkFBRCxDQUFsQztBQUFBLElBQVFDLGNBQVIsWUFBUUEsY0FBUjs7QUFDQSxnQkFBZ0JELE9BQU8sQ0FBQyxxQkFBRCxDQUF2QjtBQUFBLElBQVFFLEdBQVIsYUFBUUEsR0FBUjs7QUFFQSxJQUFNQyxXQUFXLEdBQUc7RUFDbEJDLFlBQVksRUFBRSxzQkFBQ0MsTUFBRCxFQUFZO0lBQ3hCLElBQU1DLFFBQVEsYUFBTUosR0FBTixrQkFBZDtJQUNBLE9BQU9ELGNBQWMsQ0FBQ0YsWUFBWSxDQUFDUSxJQUFkLEVBQW9CRCxRQUFwQixFQUE4QkQsTUFBOUIsQ0FBckI7RUFDRCxDQUppQjtF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